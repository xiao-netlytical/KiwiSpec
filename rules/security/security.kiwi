
define read_path=../sample_data/zeek, 
read_dns_path=../sample_data/zeek/dns.json, 
write_path=../sample_data/result

#########################################
#DNS request for each source address in a five minute window ordered by request count
read read_path/conn.json as flows
create {window_start: [{dns_src: dns_requests}]}  as r
var i  select
    flows[i]["id.orig_h"] as dns_src;
    int(epoch_time(flows[i]["ts"])/300) as window_start;
    count distinct(i) as dns_requests;
    where flows[i]["id.resp_p"] == 53;
    order by dns_requests desc
write write_path/top_dns_sender.json from r

####################
#every five minute interval, get DNS request count for per window and per source address
read read_path/conn.json as flows
create {window_start: {dns_src: cnt}}  as r
var i  select
    flows[i]["id.orig_h"] as dns_src;
    int(epoch_time(flows[i]["ts"])/300) as window_start;
    count distinct(i) group by dns_src, window_start as cnt;
where flows[i]["id.resp_p"] == 53
write write_path/5_min_dns_request.json from r

####################
# aggregate the connections between a source and destination pair, 
# and sort the source and destination pairs based on the distinct protocols
read read_path/conn.json as flows
create [{"ip":s_ip, "pkts": pkts, "bytes":bytes, "relationship":relationship}] as r
var i select
    flows[i]["id.orig_h"] as s_ip;
    count distinct(flows[i]["proto"].upper()+"_"+str(flows[i]["id.resp_p"])) as relationship;
    sum(flows[i]["orig_pkts" | 0] + flows[i]["resp_pkts" | 0]) as pkts;
    sum(flows[i]["orig_bytes" | 0] + flows[i]["resp_bytes" | 0]) as bytes;
order by relationship desc
write write_path/top_out_rel.json from r

####################
# path recording of the SMB connections

READ read_path/conn.json AS flows; write_path/ip_to_servers.json AS srv
create   [path_recording] as result
var i, j select
    flows[i]["id.orig_h"] AS s_ip_1;
    flows[i]["id.resp_h"] AS d_ip_1;
    flows[j]["id.orig_h"] AS s_ip_2;
    flows[j]["id.resp_h"] AS d_ip_2;
    collect set ((s_ip_1, d_ip_1)) where d_ip_1 == s_ip_2 extend by (s_ip_2, d_ip_2) as path_recording;
where flows[i]["id.resp_p"] in [445, 137, 138,139]; flows[j]["id.resp_p"] in [445, 137, 138,139]
WRITE write_path/path_recording.json FROM result