################
#using the object from X to create a list of size N, return all the combinations.
#where the member of X is unique and the size of X is smaller than N.

create  rt as result
var x select
	[1,4,6,7,10] as input;
	4 as N;
    collect set(input[x]) as r where len(r) < N

with r collect list(r) as rt


############
#Given a set of non-negative integers, and a value sum, 
#determine if there is a subset of the given set with sum equal to given sum. 

create r as rt
var i select
    [1,4,6,7,10] as input;
    20 as N;
    collect set(input[i]) as r where sum(r) == N

with r  collect list(r) as rt;
len(rt) as ct


#############
#combine all the sections to contiguous sections
#the sections are sorted by the lower end first

section = [{l:1, r:3}, {l:2, r:4}, {l:6, r:7}]

section = sorted(section, section.l)


update section 
var i set
section = [{l:1, r:3}, {l:2, r:4}, {l:6, r:7}]
    section[i+1].l  = section[i].l 
    where section[i+1].l <= section[i].r+1

    section[i+1].r  = section[i].r;
    where section[i+1].r < section[i].r


create r as result
var i select
    collect list(section[i]) as r;
    where section[i].r < section[i+1].l 

################
# check if an array is monotonic
create r result
var i select
    [1,4,6,7,10] as a;
    all(a[i] <= a[i+1]) or all(a[i] >= a[i+1]) as r

################
#put 0 to the end of the list

create r as resut
var i select
    [1,4,6,7,10] as a;
    Collect list(a[i]) where a[i] != 0 as a1;
    collect list(a[i]) where a[i] == 0 as a2
    a1 + a2 as r

####################
#fill in none [1,none, 2, none, …] with previous value
create [tmp]
var i select
    [1,4,6,7,10] as a;
    a[i] as tmp where a[i] is not none;
    tmp as tmp where a[i] is none

################
# find the first unique value from a list

create {value: ct} as tmp
var i select
    [1,4,6,7,10] as a;
    a[i] as value;
    count distinct(i) group by value as ct

creat r as result
var i select 
    first(i from a[i]) where tmp[a[i]] == 1 as r

#################
# get prim number of N from set K
create [prim] as result
var i,j select
    [1,4,6,7,10] as k;
    k[i] as prim;
    range(2, prim) as test;
    where all(prim/test[j] !=0)

